name: Java CI with Docker

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Build Docker image
      run: |
        docker build -t my-spring-boot-app .
        docker images  # Optional: List Docker images for verification

  test:
    runs-on: ubuntu-latest
    needs: build

    services:
      db:
        image: postgres:latest
        ports:
          - 5432:5432
        options: > 
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Start PostgreSQL container
      run: docker-compose up -d db

    - name: Wait for PostgreSQL to start
      run: |
        echo "Waiting for PostgreSQL to start..."
        until docker-compose exec -T db pg_isready -U postgres; do
          echo "Waiting..."
          sleep 5
        done
        echo "PostgreSQL is up and running."

    - name: Run Docker container
      run: docker-compose up -d app

    - name: Check running containers
      run: docker ps -a

    - name: Wait for the app to start
      run: |
        echo "Waiting for the app to start..."
        ATTEMPTS_LEFT=30
        until [ $ATTEMPTS_LEFT -eq 0 ] || curl -s http://localhost:8080/data/1; do
          echo "Waiting for the app to be accessible..."
          sleep 2
          ATTEMPTS_LEFT=$((ATTEMPTS_LEFT - 1))
        done
        if [ $ATTEMPTS_LEFT -eq 0 ]; then
          echo "The app did not start in time."
          docker logs $(docker ps -qf "name=app")
          exit 1
        fi
        echo "The app is up - continuing"

    - name: Test API endpoint
      run: |
        RESPONSE=$(curl -s -S http://localhost:8080/data/1)
        echo "Response from API: $RESPONSE"
        if [ -z "$RESPONSE" ]; then
          echo "API response is empty or failed."
          docker logs $(docker ps -qf "name=app")
          exit 1
        fi

    - name: Execute Maven tests
      run: |
        CONTAINER_NAME=$(docker ps -qf "name=app")
        echo "Running tests in container: $CONTAINER_NAME"
        if [ -z "$CONTAINER_NAME" ]; then
          echo "No container found with name app"
          docker ps -a  # List all containers for debugging
          exit 1
        fi
        docker exec $CONTAINER_NAME mvn test

    - name: Stop Docker containers
      run: docker-compose down
